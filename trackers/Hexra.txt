function getOrCreateSpreadsheet() {
    const spreadsheetName = "Datasheet";
    let spreadsheet;
    const files = DriveApp.getFilesByName(spreadsheetName);
    if (files.hasNext()) {

        const fileId = files.next().getId();
        spreadsheet = SpreadsheetApp.openById(fileId);
        console.log(`Spreedshet "${spreadsheetName}" was created successfully.`);
    } else {
        spreadsheet = SpreadsheetApp.create(spreadsheetName);
        console.log(`Spreedshet "${spreadsheetName}" was find and open`);
    }

    return spreadsheet;
}
function prepareAccountDataSheet(spreadsheet) {
    let sheet = spreadsheet.getSheetByName("Account_Data");
    if (!sheet) {
        sheet = spreadsheet.insertSheet("Account_Data");
    } else {
        sheet.clear();
    }

    const headers = [
        "Account_Name",
        "Account_ID",
        "Campaign_Name",
        "Campaign_Status",
        "Campaign_Type",
        "Clicks",
        "Impressions",
        "Spend",
        "Ads_Disapproved",
        "Disapproval_Reason",
        "Policy_Limited",
        "Policy_Reason",
        "last_insert_datetime"
    ];

    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);

    return { sheet, headers };
}

function prepareSheet1(spreadsheet) {
    let sheet1 = spreadsheet.getSheetByName("Sheet1");
    if (!sheet1) {
        sheet1 = spreadsheet.insertSheet("Sheet1");
    } else {

        sheet1.clear();
    }

    return sheet1;
}

function pauseCampaignsWithDisapprovedAds() {
    var campaignsIterator = AdsApp.campaigns()
        .withCondition("Status = ENABLED")
        .get();

    while (campaignsIterator.hasNext()) {
        var campaign = campaignsIterator.next();
        var campaignId = campaign.getId();
        var campaignName = campaign.getName();

        var adIterator = campaign.ads().get();
        let adsDisapproved = false;
        let disapprovalReasons = [];

        while (adIterator.hasNext()) {
            const ad = adIterator.next();
            const approvalStatus = ad.getPolicyApprovalStatus();

            if (approvalStatus === 'DISAPPROVED') {
                adsDisapproved = true;
                const policyTopics = ad.getPolicyTopics();

                if (policyTopics.length > 0) {
                    policyTopics.forEach(function (topic) {
                        disapprovalReasons.push(topic.getName());
                    });
                }
            }
        }

        if (adsDisapproved) {
            campaign.pause();
        }
    }
}
function main() {
    const accountId = AdsApp.currentAccount().getCustomerId();
    const ACCOUNT_NAME = AdsApp.currentAccount().getName();
    const targetSpreadsheetId = "1F7dqN8m7CbcCQ1zgQAUChHif3GU19_6gnv42vNbW6UQ";
    const targetSheetName = "Accounts_Data";

    const spreadsheet = getOrCreateSpreadsheet();
    const { sheet, headers } = prepareAccountDataSheet(spreadsheet);
    const sheet1 = prepareSheet1(spreadsheet);


    const bucharestTimezone = "Europe/Bucharest";
    let mostRecentCampaign = null;
    let mostRecentStartDate = null;
    let rows = [];

    const campaignSelectors = [
        AdsApp.campaigns().withCondition("Status IN ['ENABLED', 'PAUSED']"),
        AdsApp.videoCampaigns().withCondition("Status IN ['ENABLED', 'PAUSED']")
    ];


    const videoCampaignIterator = AdsApp.videoCampaigns().withCondition("Status IN ['ENABLED', 'PAUSED']").get();

    while (videoCampaignIterator.hasNext()) {
        const videoCampaign = videoCampaignIterator.next();
        console.log(`ðŸŽ¥ Found Video Campaign: ${videoCampaign.getName()}, Status: ${videoCampaign.isEnabled() ? "Enabled" : "Paused"}`);
    }

    campaignSelectors.forEach(selector => {
        const iterator = selector.get();
        while (iterator.hasNext()) {
            const campaign = iterator.next();
            const startDateObject = campaign.getStartDate();
            if (!startDateObject) continue;

            const startDateString = `${startDateObject.year}-${startDateObject.month.toString().padStart(2, '0')}-${startDateObject.day.toString().padStart(2, '0')}`;
            const startDate = new Date(startDateString);
            if (isNaN(startDate.getTime())) continue;

            if (!mostRecentStartDate || startDate.getTime() > mostRecentStartDate.getTime()) {
                mostRecentCampaign = campaign;
                mostRecentStartDate = startDate;
            }
        }
    });



    if (mostRecentCampaign) {
        let campaignStatus = mostRecentCampaign.isEnabled() ? "Enabled" : "Paused";
        let campaignType = mostRecentCampaign.getAdvertisingChannelType();

        const stats = mostRecentCampaign.getStatsFor("ALL_TIME");
        let clicks = stats.getClicks();
        let impressions = stats.getImpressions();
        let spend = stats.getCost();

        let adsDisapproved = false;
        let disapprovalReasons = [];
        let policyLimited = "No";
        let policyReasons = [];


        let adIterator;
        if (campaignType === "VIDEO") {
            adIterator = mostRecentCampaign.videoAds().get();
        } else {
            adIterator = mostRecentCampaign.ads().get();
        }

        while (adIterator.hasNext()) {
            const ad = adIterator.next();
            if (ad.getPolicyApprovalStatus() === 'DISAPPROVED') {
                adsDisapproved = true;
                ad.getPolicyTopics().forEach(topic => {
                    disapprovalReasons.push(topic.getName());
                });
            }
            if (ad.getPolicyApprovalStatus().includes('LIMITED')) {
                policyLimited = "Yes";
                ad.getPolicyTopics().forEach(topic => {
                    policyReasons.push(topic.getId());
                });
            }
        }
        const currentDate = new Date();
        const lastInsertDateTime = "->" + Utilities.formatDate(currentDate, bucharestTimezone, "HH:mm:ss dd-MM-yyyy");

        rows.push([
            ACCOUNT_NAME,
            accountId,
            mostRecentCampaign.getName(),
            campaignStatus,
            campaignType,
            clicks,
            impressions,
            spend,
            adsDisapproved ? "Yes" : "No",
            disapprovalReasons.join(", ") || "-",
            policyLimited,
            policyReasons.join(", ") || "-",
            lastInsertDateTime
        ]);
    }

    if (rows.length > 0) {
        sheet.getRange(2, 1, rows.length, rows[0].length).setValues(rows);
        const dataWithHeaders = rows.map(row => {
            const rowObject = {};
            headers.forEach((header, index) => {
                rowObject[header] = row[index];
            });
            return rowObject;
        });

        const jsonData = JSON.stringify(dataWithHeaders);
        const base64Data = Utilities.base64Encode(jsonData);
        sheet1.getRange("A1").setValue(base64Data);

        sendDataToTargetSpreadsheet(targetSpreadsheetId, targetSheetName);

    }

    pauseCampaignsWithDisapprovedAds();

}

function sendDataToTargetSpreadsheet(targetSpreadsheetId, targetSheetName) {

    const sourceSpreadsheet = getOrCreateSpreadsheet();
    const sourceSheet = sourceSpreadsheet.getSheetByName("Account_Data");

    if (!sourceSheet) {

        return;
    }


    let targetSpreadsheet;
    try {
        targetSpreadsheet = SpreadsheetApp.openById(targetSpreadsheetId);
    } catch (e) {
        return;
    }


    let targetSheet = targetSpreadsheet.getSheetByName(targetSheetName);
    if (!targetSheet) {

        targetSheet = targetSpreadsheet.insertSheet(targetSheetName);
    }


    const sourceData = sourceSheet.getDataRange().getValues();
    const headers = sourceData[0];
    const rows = sourceData.slice(1);


    const targetData = targetSheet.getDataRange().getValues();
    const targetHeaders = targetData[0];


    if (targetData.length === 0) {
        targetSheet.appendRow(headers);
    }

    if (JSON.stringify(headers) !== JSON.stringify(targetHeaders)) {
        return;
    }


    const accountNameIndex = headers.indexOf("Account_Name");
    if (accountNameIndex === -1) {
        return;
    }


    rows.forEach((row) => {
        const accountName = row[accountNameIndex];


        let targetRowIndex = -1;
        for (let i = 1; i < targetData.length; i++) {
            if (targetData[i][accountNameIndex] === accountName) {
                targetRowIndex = i + 1;
                break;
            }
        }

        if (targetRowIndex !== -1) {

            targetSheet.getRange(targetRowIndex, 1, 1, row.length).setValues([row]);
        } else {

            targetSheet.appendRow(row);
        }
    });
}